USE [TaskNo2]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CHECK_TRANSACTION]') AND type in (N'P'))
DROP PROCEDURE [dbo].[CHECK_TRANSACTION]
GO

CREATE PROCEDURE CHECK_TRANSACTION
 @ID INT
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @AVAILABLE_ID INT;
	DECLARE @UNAVAILABLE_ID INT;
	DECLARE @FETCH_AVAILABLE INT;
	DECLARE @FETCH_UNAVAILABLE INT;
	DECLARE @MESSAGE VARCHAR(100);

	SET TRANSACTION
	ISOLATION LEVEL SERIALIZABLE
	BEGIN TRANSACTION

	IF EXISTS (SELECT * FROM [TRANSPORTS] WHERE TRANSPORT_ID = @ID) BEGIN
		IF (SELECT HAS_FINISHED FROM [TRANSPORTS] WHERE TRANSPORT_ID = @ID) = 0 BEGIN
			DECLARE AVAILABLE_EMPLOYEES CURSOR FOR
				SELECT DISTINCT E.EMPLOYEE_ID
				FROM [EMPLOYEES] E
				LEFT JOIN [TRS-EMP] TE ON TE.EMPLOYEE_ID = E.EMPLOYEE_ID
				LEFT JOIN [TRS-VEH] TV ON TV.TRANSPORT_ID = TE.TRANSPORT_ID AND TV.VIN = TE.VIN
				WHERE E.IS_AVAILABLE = 1
				AND (E.LAST_TRIP IS NULL OR DATEDIFF(SECOND, E.LAST_TRIP, GETDATE()) > 1)
				AND E.EMPLOYEE_ID NOT IN (
					SELECT DISTINCT TEE.EMPLOYEE_ID
					FROM [TRS-EMP] TEE
					JOIN [TRS-VEH] TVV ON TVV.TRANSPORT_ID = TEE.TRANSPORT_ID AND TVV.VIN = TEE.VIN
					WHERE (TVV.DRIVE_LAUNCH IS NOT NULL AND TVV.DRIVE_LAUNCH < GETDATE())
					AND (TVV.DRIVE_FINISH IS NULL OR TVV.DRIVE_FINISH > GETDATE())
				)
				AND E.EMPLOYEE_ID NOT IN (
					SELECT DISTINCT TEE.EMPLOYEE_ID
					FROM [TRS-EMP] TEE
					WHERE TEE.TRANSPORT_ID = @ID
				)
				ORDER BY E.EMPLOYEE_ID DESC
			OPEN AVAILABLE_EMPLOYEES

			DECLARE UNAVAILABLE_EMPLOYEES CURSOR FOR
				SELECT DISTINCT E.EMPLOYEE_ID
				FROM [EMPLOYEES] E
				JOIN [TRS-EMP] TE ON TE.EMPLOYEE_ID = E.EMPLOYEE_ID
				JOIN [TRS-VEH] TV ON TV.TRANSPORT_ID = TE.TRANSPORT_ID AND TV.VIN = TE.VIN
				WHERE TE.TRANSPORT_ID = @ID
				AND (E.IS_AVAILABLE = 0 OR E.EMPLOYEE_ID IN (
					SELECT DISTINCT TEE.EMPLOYEE_ID
					FROM [TRS-EMP] TEE
					JOIN [TRS-VEH] TVV ON TVV.TRANSPORT_ID = TEE.TRANSPORT_ID AND TVV.VIN = TEE.VIN
					WHERE (TVV.DRIVE_LAUNCH IS NOT NULL AND TVV.DRIVE_LAUNCH < GETDATE())
					AND (TVV.DRIVE_FINISH IS NULL OR TVV.DRIVE_FINISH > GETDATE())
				))
			OPEN UNAVAILABLE_EMPLOYEES

			FETCH NEXT FROM UNAVAILABLE_EMPLOYEES
			INTO @UNAVAILABLE_ID
			SET @FETCH_UNAVAILABLE = @@FETCH_STATUS
			FETCH NEXT FROM AVAILABLE_EMPLOYEES
			INTO @AVAILABLE_ID
			SET @FETCH_AVAILABLE = @@FETCH_STATUS

			IF (@FETCH_UNAVAILABLE <> 0 AND @FETCH_UNAVAILABLE <> 1) BEGIN
				UPDATE [TRANSPORTS]
				SET IS_DELAYED = 0
				WHERE TRANSPORT_ID = @ID
				COMMIT

				SET @MESSAGE = 'Transport No. ' + CAST(@ID AS NVARCHAR(10))
				PRINT @MESSAGE
				SET @MESSAGE = 'Transport has no unavailable drivers assigned. Nothing to be modified.'
				PRINT @MESSAGE
			END
			ELSE BEGIN
				IF @FETCH_UNAVAILABLE = 1 BEGIN
					ROLLBACK

					SET @MESSAGE = 'Transport No. ' + CAST(@ID AS NVARCHAR(10))
					PRINT @MESSAGE
					SET @MESSAGE = 'ERROR while obtaining results. Procedure cancelled.'
					PRINT @MESSAGE
				END
				ELSE BEGIN
					WHILE (@FETCH_UNAVAILABLE = 0 AND @FETCH_AVAILABLE = 0) BEGIN
						UPDATE [TRS-EMP]
						SET EMPLOYEE_ID = @AVAILABLE_ID
						WHERE EMPLOYEE_ID = @UNAVAILABLE_ID
						AND TRANSPORT_ID = @ID

						FETCH NEXT FROM UNAVAILABLE_EMPLOYEES
						INTO @UNAVAILABLE_ID
						SET @FETCH_UNAVAILABLE = @@FETCH_STATUS
						FETCH NEXT FROM AVAILABLE_EMPLOYEES
						INTO @AVAILABLE_ID
						SET @FETCH_AVAILABLE = @@FETCH_STATUS
					END

					IF (@FETCH_UNAVAILABLE = 1 OR @FETCH_AVAILABLE = 1) BEGIN
						ROLLBACK

						SET @MESSAGE = 'Transport No. ' + CAST(@ID AS NVARCHAR(10))
						PRINT @MESSAGE
						SET @MESSAGE = 'ERROR while obtaining results. Procedure cancelled.'
						PRINT @MESSAGE
					END
					ELSE BEGIN
						IF (@FETCH_UNAVAILABLE = 0 AND (@FETCH_AVAILABLE <> 0 OR @FETCH_AVAILABLE <> 1)) BEGIN
							ROLLBACK

							SET TRANSACTION
							ISOLATION LEVEL READ COMMITTED
							BEGIN TRANSACTION
							UPDATE [TRANSPORTS]
							SET IS_DELAYED = 1
							WHERE TRANSPORT_ID = @ID
							COMMIT

							SET @MESSAGE = 'Transport No. ' + CAST(@ID AS NVARCHAR(10))
							PRINT @MESSAGE
							SET @MESSAGE = 'Transport has unavailable drivers assigned, yet there are not enough free drivers to replace them. Transaction is delayed.'
							PRINT @MESSAGE
						END
						ELSE BEGIN
							UPDATE [TRANSPORTS]
							SET IS_DELAYED = 0
							WHERE TRANSPORT_ID = @ID
							COMMIT

							SET @MESSAGE = 'Transport No. ' + CAST(@ID AS NVARCHAR(10))
							PRINT @MESSAGE
							SET @MESSAGE = 'Changes committed successfully.'
							PRINT @MESSAGE
						END
					END
				END
			END
			CLOSE AVAILABLE_EMPLOYEES;
			CLOSE UNAVAILABLE_EMPLOYEES;
			DEALLOCATE AVAILABLE_EMPLOYEES;
			DEALLOCATE UNAVAILABLE_EMPLOYEES;
		END
		ELSE BEGIN
			ROLLBACK

			SET @MESSAGE = 'Transport No. ' + CAST(@ID AS NVARCHAR(10))
			PRINT @MESSAGE
			SET @MESSAGE = 'Transport has already been finished. Nothing to be modified.'
			PRINT @MESSAGE
		END
	END
	ELSE BEGIN
		ROLLBACK

		SET @MESSAGE = 'Transport No. ' + CAST(@ID AS NVARCHAR(10))
		PRINT @MESSAGE
		SET @MESSAGE = 'Transaction not found.'
		PRINT @MESSAGE
	END
END
GO

-- NEEDS UPDATE NO. 3 TO BE EXECUTED
EXECUTE CHECK_TRANSACTION 11;